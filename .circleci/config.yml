version: 2

defaults: &defaults
  working_directory: /go/src/github.com/weaveworks/scope
  docker:
    - image: weaveworks/scope-backend-build:circle-2.0-2885645

client-defaults: &client-defaults
  working_directory: /home/weave
  docker:
    - image: weaveworks/scope-ui-build:circle-2.0-2885645

workflows:
  version: 2
  test_and_deploy:
    jobs:
      - lint
      - unit-test
      - client-lint
      - client-test
      - arm-build
      - darwin-build
      - build
      - integration-tests:
          requires:
            - lint
            - unit-test
            - build
      - gen-coverage:
          requires:
            - unit-test
            - integration-tests
      - deploy:
          filters:
            branches:
              only: master
          requires:
            - client-lint
            - client-test
            - integration-tests
      - deploy-dev:
          filters:
            branches:
              ignore: master
          requires:
            - build

jobs:
  lint:
    <<: *defaults
    steps:
      - checkout
      - run: make BUILD_IN_CONTAINER=false lint

  unit-test:
    <<: *defaults
    parallelism: 1
    steps:
      - checkout
      - run: COVERDIR=./coverage make BUILD_IN_CONTAINER=false CODECGEN_UID=23 tests
      - persist_to_workspace:
          root: .
          paths:
          - coverage

  client-lint:
    <<: *client-defaults
    steps:
      - checkout
      - run: make BUILD_IN_CONTAINER=false client-lint

  client-test:
    <<: *client-defaults
    steps:
      - checkout
      - run: make BUILD_IN_CONTAINER=false client-test

  arm-build:
    <<: *defaults
    steps:
      - checkout
      - run: GOARCH=arm make BUILD_IN_CONTAINER=false GO_BUILD_INSTALL_DEPS= prog/scope

  darwin-build:
    <<: *defaults
    steps:
      - checkout
      - run: GOOS=darwin make BUILD_IN_CONTAINER=false GO_BUILD_INSTALL_DEPS= prog/scope

  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: make BUILD_IN_CONTAINER=false SUDO= all
      - run: cd extras; make BUILD_IN_CONTAINER=false
      - persist_to_workspace:
          root: .
          paths:
          - scope.tar
          - cloud-agent.tar

  integration-tests:
    machine:
      image: circleci/classic:201709-01
    working_directory: /home/circleci/src/github.com/weaveworks/scope
    environment:
      SRCDIR: /home/circleci/src/github.com/weaveworks/scope
      CIRCLE_ARTIFACTS: /tmp/artifacts
      CLOUDSDK_CORE_DISABLE_PROMPTS: 1
    parallelism: 2
    steps:
      - checkout
      - attach_workspace:
          at: .
      # kick off creation of test VMs
      - run: test -z "$SECRET_PASSWORD" || bin/setup-circleci-secrets "$SECRET_PASSWORD"
      - run: test -z "$SECRET_PASSWORD" || (cd $SRCDIR/integration; ./gce.sh make_template)
      - run: test -z "$SECRET_PASSWORD" || (cd $SRCDIR/integration; ./gce.sh setup && eval $(./gce.sh hosts); ./setup.sh)
      - run:
          command: test -z "$SECRET_PASSWORD" || (cd $SRCDIR/integration; eval $(./gce.sh hosts); ./run_all.sh)
          no_output_timeout: 5m
      # Destroy testing VMs:
      - run:
          command: test -z "$SECRET_PASSWORD" || (cd $SRCDIR/integration; ./gce.sh destroy)
          background: true
      - persist_to_workspace:
          root: .
          paths:
          - coverage

  gen-coverage:
    <<: *defaults
    environment:
      CIRCLE_ARTIFACTS: /tmp/artifacts
    steps:
      - checkout
      - run: mkdir $CIRCLE_ARTIFACTS
      - attach_workspace:
          at: .
      - run: ./tools/cover/gather_coverage.sh ./coverage $SRCDIR/coverage
      - run: goveralls -repotoken $COVERALLS_REPO_TOKEN -coverprofile=profile.cov -service=circleci
      - run: cp coverage.* */*.codecgen.go $CIRCLE_ARTIFACTS
      - store_artifacts:
          path: /tmp/artifacts

  deploy:
    <<: *defaults
    environment:
      IMAGES: scope cloud-agent
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: .
      # PATH must be set here as circle currently does not support string interpolation
      # for environment
      # https://discuss.circleci.com/t/bin-sh-mkdir-command-not-found/8710
      - run: export PATH="$PATH:$HOME/.local/bin"
      - run: |
          docker load -i scope.tar
          docker load -i cloud-agent.tar
          test -z "${DOCKER_USER}" || (
            docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS &&
            (test "${DOCKER_ORGANIZATION:-$DOCKER_USER}" = "weaveworks" || (
              for IMAGE in $IMAGES; do
                docker tag weaveworks/$IMAGE:latest ${DOCKER_ORGANIZATION:-$DOCKER_USER}/$IMAGE:latest &&
                docker tag weaveworks/$IMAGE:$(./tools/image-tag) ${DOCKER_ORGANIZATION:-$DOCKER_USER}/$IMAGE:$(./tools/image-tag)
              done
            )) &&
            for IMAGE in $IMAGES; do
              docker push ${DOCKER_ORGANIZATION:-$DOCKER_USER}/$IMAGE &&
              docker push ${DOCKER_ORGANIZATION:-$DOCKER_USER}/$IMAGE:$(./tools/image-tag)
            done
          )
      - run: |
          test -z "${QUAY_USER}" || (
            docker login -e '.' -u "$QUAY_USER" -p "$QUAY_PASSWORD" quay.io &&
            docker tag weaveworks/scope:$(./tools/image-tag) "quay.io/${QUAY_ORGANIZATION}/scope:$(./tools/image-tag)" &&
            docker push "quay.io/${QUAY_ORGANIZATION}/scope:$(./tools/image-tag)"
          )
      - run: test -z "${UI_BUCKET_KEY_ID}" || (cd $SRCDIR && make ui-upload && make ui-pkg-upload)

  deploy-dev:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: .
      # PATH must be set here as circle currently does not support string interpolation
      # for environment
      # https://discuss.circleci.com/t/bin-sh-mkdir-command-not-found/8710
      - run: export PATH="$PATH:$HOME/.local/bin"
      - run: >
          test -z "${DEPLOY_BRANCH}" || test -z "${DOCKER_USER}" || (
            docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS &&
            docker tag weaveworks/scope:latest ${DOCKER_ORGANIZATION:-$DOCKER_USER}/scope:${CIRCLE_BRANCH//\//-} &&
            docker push ${DOCKER_ORGANIZATION:-$DOCKER_USER}/scope:${CIRCLE_BRANCH//\//-}
          )
